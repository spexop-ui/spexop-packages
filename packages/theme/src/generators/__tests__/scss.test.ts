/**
 * Tests for SCSS Generator
 */

import { describe, expect, it } from "vitest";
import type { SpexopThemeConfig } from "../../types/SpexopThemeConfig.js";
import { generateSCSS } from "../scss.js";

describe("SCSS Generator", () => {
  const mockTheme: SpexopThemeConfig = {
    meta: {
      name: "Test Theme",
      version: "1.0.0",
    },
    colors: {
      primary: "#3b82f6",
      secondary: "#10b981",
      surface: "#ffffff",
      surfaceSecondary: "#f3f4f6",
      surfaceHover: "#e5e7eb",
      text: "#111827",
      textSecondary: "#6b7280",
      textMuted: "#9ca3af",
      border: "#d1d5db",
      borderStrong: "#9ca3af",
      borderSubtle: "#e5e7eb",
    },
    typography: {
      fontFamily: "Inter, system-ui, sans-serif",
      baseSize: 16,
      scale: 1.25,
      weights: {
        regular: 400,
        medium: 500,
        semibold: 600,
        bold: 700,
      },
      lineHeights: {
        tight: 1.2,
        snug: 1.375,
        normal: 1.5,
        relaxed: 1.75,
      },
    },
    spacing: {
      baseUnit: 4,
      values: {
        1: 4,
        2: 8,
        3: 12,
        4: 16,
      },
    },
    borders: {
      thin: 1,
      default: 2,
      thick: 4,
      radiusSubtle: 8,
      radiusRelaxed: 12,
      radiusPill: 9999,
      defaultStyle: "solid",
    },
  };

  describe("basic generation", () => {
    it("should generate valid SCSS syntax", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toBeTruthy();
      expect(result).toContain("$theme-");
      expect(result).toContain("//");
      expect(result).not.toContain("--theme-"); // CSS variables not SCSS
    });

    it("should include theme metadata in header", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain(mockTheme.meta.name);
      expect(result).toContain(mockTheme.meta.version);
      expect(result).toContain("Generated by @spexop/theme");
    });

    it("should generate SCSS variable syntax", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toMatch(/\$theme-primary:\s*#[0-9a-f]{6}/);
      expect(result).toMatch(/\$theme-font-size-base:\s*\d+px/);
      expect(result).toMatch(/\$theme-spacing-\d+:\s*\d+px/);
    });
  });

  describe("color variables", () => {
    it("should generate primary color variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-primary:");
      expect(result).toContain("$theme-primary-hover:");
      expect(result).toContain("$theme-primary-active:");
    });

    it("should generate surface color variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-surface:");
      expect(result).toContain("$theme-surface-secondary:");
      expect(result).toContain("$theme-surface-hover:");
    });

    it("should generate text color variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-text:");
      expect(result).toContain("$theme-text-secondary:");
      expect(result).toContain("$theme-text-muted:");
    });

    it("should generate optional semantic colors", () => {
      const themeWithSemantics: SpexopThemeConfig = {
        ...mockTheme,
        colors: {
          ...mockTheme.colors,
          success: "#10b981",
          warning: "#f59e0b",
          error: "#ef4444",
          info: "#3b82f6",
        },
      };

      const result = generateSCSS(themeWithSemantics);

      expect(result).toContain("$theme-success:");
      expect(result).toContain("$theme-warning:");
      expect(result).toContain("$theme-error:");
      expect(result).toContain("$theme-info:");
    });
  });

  describe("spacing variables", () => {
    it("should generate spacing map", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-spacing:");
      expect(result).toContain("  1: 4px,");
      expect(result).toContain("  2: 8px,");
    });

    it("should generate individual spacing variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-spacing-1:");
      expect(result).toContain("$theme-spacing-2:");
      expect(result).toContain("$theme-spacing-3:");
    });

    it("should use baseUnit when values not provided", () => {
      const themeWithoutValues: SpexopThemeConfig = {
        ...mockTheme,
        spacing: {
          baseUnit: 8,
          values: undefined, // undefined, not empty object
        },
      };

      const result = generateSCSS(themeWithoutValues);

      expect(result).toContain("1: 8px"); // baseUnit * 1
      expect(result).toContain("2: 16px"); // baseUnit * 2
    });
  });

  describe("typography variables", () => {
    it("should generate font family variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-font-family:");
      expect(result).toContain("Inter, system-ui, sans-serif");
    });

    it("should generate font size scale", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-font-size-xs:");
      expect(result).toContain("$theme-font-size-sm:");
      expect(result).toContain("$theme-font-size-base:");
      expect(result).toContain("$theme-font-size-lg:");
      expect(result).toContain("$theme-font-size-xl:");
    });

    it("should generate font weight variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-font-weight-regular:");
      expect(result).toContain("$theme-font-weight-semibold:");
      expect(result).toContain("$theme-font-weight-bold:");
    });

    it("should generate line height variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-line-height-tight:");
      expect(result).toContain("$theme-line-height-normal:");
      expect(result).toContain("$theme-line-height-relaxed:");
    });
  });

  describe("border variables", () => {
    it("should generate border width variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-border-thin:");
      expect(result).toContain("$theme-border-width:");
      expect(result).toContain("$theme-border-thick:");
    });

    it("should generate radius variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-radius-subtle:");
      expect(result).toContain("$theme-radius-relaxed:");
      expect(result).toContain("$theme-radius-pill:");
    });

    it("should generate border style variable", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-border-style:");
      expect(result).toContain("solid");
    });
  });

  describe("breakpoint variables", () => {
    it("should generate breakpoint map", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-breakpoints:");
      expect(result).toContain("xs:");
      expect(result).toContain("sm:");
      expect(result).toContain("md:");
    });

    it("should generate individual breakpoint variables", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("$theme-breakpoint-xs:");
      expect(result).toContain("$theme-breakpoint-sm:");
      expect(result).toContain("$theme-breakpoint-md:");
    });

    it("should use default breakpoints when not provided", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("xs: 320px");
      expect(result).toContain("sm: 640px");
      expect(result).toContain("md: 768px");
      expect(result).toContain("lg: 1024px");
    });
  });

  describe("helper mixins", () => {
    it("should generate text style mixin", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("@mixin theme-text-style");
      expect(result).toContain("font-family: $theme-font-family");
    });

    it("should generate button base mixin", () => {
      const result = generateSCSS(mockTheme);

      expect(result).toContain("@mixin theme-button-base");
      expect(result).toContain("border-radius: $theme-radius-relaxed");
    });
  });

  describe("optional properties", () => {
    it("should handle missing secondary colors", () => {
      const minimalTheme: SpexopThemeConfig = {
        ...mockTheme,
        colors: {
          ...mockTheme.colors,
          secondary: undefined,
        },
      };

      const result = generateSCSS(minimalTheme);

      expect(result).not.toContain("$theme-secondary:");
    });

    it("should handle optional font families", () => {
      const themeWithMonospace: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          fontFamilyMono: "'Fira Code', monospace",
        },
      };

      const result = generateSCSS(themeWithMonospace);

      expect(result).toContain("$theme-font-family-mono:");
      expect(result).toContain("Fira Code");
    });
  });

  describe("edge cases", () => {
    it("should handle spacing values from theme", () => {
      const result = generateSCSS(mockTheme);

      // mockTheme has spacing.values with 1, 2, 3, 4
      expect(result).toContain("$theme-spacing-1: 4px");
      expect(result).toContain("$theme-spacing-2: 8px");
    });

    it("should handle large spacing values", () => {
      const themeWithLargeSpacing: SpexopThemeConfig = {
        ...mockTheme,
        spacing: {
          baseUnit: 8,
          values: {
            0: 0,
            1: 8,
            10: 80,
          } as Record<string, number>,
        },
      };

      const result = generateSCSS(themeWithLargeSpacing);

      expect(result).toContain("10: 80px");
    });

    it("should escape special characters in font names", () => {
      const themeWithQuotes: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          fontFamily: "'Helvetica Neue', Arial, sans-serif",
        },
      };

      const result = generateSCSS(themeWithQuotes);

      expect(result).toContain("Helvetica Neue");
    });
  });
});
