/**
 * Tests for Tailwind CSS Generator
 */

import { describe, expect, it } from "vitest";
import type { SpexopThemeConfig } from "../../types/SpexopThemeConfig.js";
import { generateTailwind } from "../tailwind.js";

describe("Tailwind Generator", () => {
  const mockTheme: SpexopThemeConfig = {
    meta: {
      name: "Test Theme",
      version: "1.0.0",
    },
    colors: {
      primary: "#3b82f6",
      secondary: "#10b981",
      surface: "#ffffff",
      surfaceSecondary: "#f3f4f6",
      surfaceHover: "#e5e7eb",
      text: "#111827",
      textSecondary: "#6b7280",
      textMuted: "#9ca3af",
      border: "#d1d5db",
      borderStrong: "#9ca3af",
      borderSubtle: "#e5e7eb",
    },
    typography: {
      fontFamily: "Inter, system-ui, sans-serif",
      baseSize: 16,
      scale: 1.25,
      weights: {
        regular: 400,
        medium: 500,
        semibold: 600,
        bold: 700,
      },
      lineHeights: {
        tight: 1.2,
        snug: 1.375,
        normal: 1.5,
        relaxed: 1.75,
      },
    },
    spacing: {
      baseUnit: 4,
      values: {
        1: 4,
        2: 8,
        3: 12,
        4: 16,
      },
    },
    borders: {
      thin: 1,
      default: 2,
      thick: 4,
      radiusSubtle: 8,
      radiusRelaxed: 12,
      radiusPill: 9999,
      defaultStyle: "solid",
    },
  };

  describe("basic generation", () => {
    it("should generate valid Tailwind config syntax", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toBeTruthy();
      expect(result).toContain("export default");
      expect(result).toContain("theme:");
      expect(result).toContain("extend:");
    });

    it("should include TypeScript type comment", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("@type {import('tailwindcss').Config}");
    });

    it("should include theme metadata in header", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain(mockTheme.meta.name);
      expect(result).toContain(mockTheme.meta.version);
      expect(result).toContain("Generated by @spexop/theme");
    });

    it("should include default content paths", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("content:");
      expect(result).toContain("./src/**/*.{js,jsx,ts,tsx}");
    });
  });

  describe("color configuration", () => {
    it("should generate primary color with variants", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("primary:");
      expect(result).toContain('DEFAULT: "#3b82f6"');
      expect(result).toContain("hover:");
      expect(result).toContain("active:");
    });

    it("should generate secondary colors when present", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("secondary:");
      expect(result).toContain("#10b981");
    });

    it("should generate surface colors", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("surface:");
      expect(result).toContain('DEFAULT: "#ffffff"');
      expect(result).toContain("secondary:");
      expect(result).toContain("hover:");
    });

    it("should generate text colors", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("text:");
      expect(result).toContain("#111827");
      expect(result).toContain("muted:");
    });

    it("should generate border colors", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("border:");
      expect(result).toContain("#d1d5db");
      expect(result).toContain("strong:");
      expect(result).toContain("subtle:");
    });

    it("should generate semantic colors", () => {
      const themeWithSemantics: SpexopThemeConfig = {
        ...mockTheme,
        colors: {
          ...mockTheme.colors,
          success: "#10b981",
          warning: "#f59e0b",
          error: "#ef4444",
          info: "#3b82f6",
        },
      };

      const result = generateTailwind(themeWithSemantics);

      expect(result).toContain('success: "#10b981"');
      expect(result).toContain('warning: "#f59e0b"');
      expect(result).toContain('error: "#ef4444"');
      expect(result).toContain('info: "#3b82f6"');
    });
  });

  describe("typography configuration", () => {
    it("should generate font family configuration", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("fontFamily:");
      expect(result).toContain("sans:");
      expect(result).toContain("Inter, system-ui, sans-serif");
    });

    it("should generate font size with line heights", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("fontSize:");
      expect(result).toContain("xs:");
      expect(result).toContain("sm:");
      expect(result).toContain("base:");
      expect(result).toContain("lineHeight:");
    });

    it("should generate font weights", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("fontWeight:");
      expect(result).toContain("normal: 400");
      expect(result).toContain("semibold: 600");
      expect(result).toContain("bold: 700");
    });

    it("should handle optional heading font", () => {
      const themeWithHeading: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          fontFamilyHeading: "'Playfair Display', serif",
        },
      };

      const result = generateTailwind(themeWithHeading);

      expect(result).toContain("heading:");
      expect(result).toContain("Playfair Display");
    });

    it("should handle optional mono font", () => {
      const themeWithMono: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          fontFamilyMono: "'Fira Code', monospace",
        },
      };

      const result = generateTailwind(themeWithMono);

      expect(result).toContain("mono:");
      expect(result).toContain("Fira Code");
    });
  });

  describe("spacing configuration", () => {
    it("should generate spacing object", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("spacing:");
      expect(result).toMatch(/"1":\s*"4px"/);
      expect(result).toMatch(/"2":\s*"8px"/);
    });

    it("should convert spacing to pixel strings", () => {
      const result = generateTailwind(mockTheme);

      // Should be in JSON format with px units
      expect(result).toContain('"4px"');
      expect(result).toContain('"8px"');
      expect(result).toContain('"12px"');
    });

    it("should use baseUnit when values not provided", () => {
      const themeWithoutValues: SpexopThemeConfig = {
        ...mockTheme,
        spacing: {
          baseUnit: 8,
          values: undefined, // undefined, not empty object
        },
      };

      const result = generateTailwind(themeWithoutValues);

      expect(result).toContain('"8px"'); // baseUnit * 1
      expect(result).toContain('"16px"'); // baseUnit * 2
    });
  });

  describe("border configuration", () => {
    it("should generate border widths", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("borderWidth:");
      expect(result).toContain('thin: "1px"');
      expect(result).toContain('DEFAULT: "2px"');
      expect(result).toContain('thick: "4px"');
    });

    it("should generate border radius", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("borderRadius:");
      expect(result).toContain('subtle: "8px"');
      expect(result).toContain('relaxed: "12px"');
      expect(result).toContain('pill: "9999px"');
    });
  });

  describe("breakpoint configuration", () => {
    it("should generate screens configuration", () => {
      const themeWithBreakpoints: SpexopThemeConfig = {
        ...mockTheme,
        breakpoints: {
          xs: 320,
          sm: 640,
          md: 768,
          lg: 1024,
          xl: 1280,
          "2xl": 1536,
        },
      };

      const result = generateTailwind(themeWithBreakpoints);

      expect(result).toContain("screens:");
      expect(result).toContain('xs: "320px"');
      expect(result).toContain('sm: "640px"');
      expect(result).toContain('md: "768px"');
      expect(result).toContain("'2xl':");
    });

    it("should not include screens if breakpoints not provided", () => {
      const result = generateTailwind(mockTheme);

      // Mock theme doesn't have breakpoints
      expect(result).not.toContain("screens:");
    });
  });

  describe("plugins section", () => {
    it("should include empty plugins array", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toContain("plugins: []");
    });
  });

  describe("JSON formatting", () => {
    it("should properly escape JSON strings", () => {
      const result = generateTailwind(mockTheme);

      // Check for proper JSON formatting
      expect(result).toContain('DEFAULT: "#');
      expect(result).not.toContain('"#"'); // No double escaping
    });

    it("should handle color values without quotes in keys", () => {
      const result = generateTailwind(mockTheme);

      expect(result).toMatch(/primary:\s*{/);
      expect(result).toMatch(/DEFAULT:\s*"#[0-9a-f]{6}"/);
    });
  });

  describe("edge cases", () => {
    it("should handle missing secondary colors", () => {
      const minimalTheme: SpexopThemeConfig = {
        ...mockTheme,
        colors: {
          ...mockTheme.colors,
          secondary: undefined,
        },
      };

      const result = generateTailwind(minimalTheme);

      // Should not have "secondary: {" color group (but may have surfaceSecondary)
      expect(result).not.toMatch(/\n\s*secondary:\s*{/);
    });

    it("should handle missing semantic colors", () => {
      const result = generateTailwind(mockTheme);

      // MockTheme doesn't have success/warning/error/info
      expect(result).not.toContain("success:");
      expect(result).not.toContain("warning:");
    });

    it("should handle complex typography scales", () => {
      const themeWithScale: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          scale: Math.SQRT2, // Golden ratio
        },
      };

      const result = generateTailwind(themeWithScale);

      expect(result).toContain("fontSize:");
      expect(result).toBeTruthy();
    });
  });

  describe("output validation", () => {
    it("should generate parseable JavaScript", () => {
      const result = generateTailwind(mockTheme);

      // Should not have syntax errors
      expect(result).not.toContain("undefined: ");
      expect(result).not.toContain("null: ");
      expect(result).toMatch(/export default\s*{/);
    });

    it("should maintain proper indentation", () => {
      const result = generateTailwind(mockTheme);

      // Check for nested indentation
      expect(result).toMatch(/theme:\s*{/);
      expect(result).toMatch(/extend:\s*{/);
      expect(result).toMatch(/colors:\s*{/);
    });
  });
});
