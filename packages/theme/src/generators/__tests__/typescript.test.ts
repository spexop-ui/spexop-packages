/**
 * Tests for TypeScript Generator
 */

import { describe, expect, it } from "vitest";
import type { SpexopThemeConfig } from "../../types/SpexopThemeConfig.js";
import { generateTypeScript } from "../typescript.js";

describe("TypeScript Generator", () => {
  const mockTheme: SpexopThemeConfig = {
    meta: {
      name: "Test Theme",
      version: "1.0.0",
      description: "A test theme",
      author: "Test Author",
    },
    colors: {
      primary: "#3b82f6",
      secondary: "#10b981",
      surface: "#ffffff",
      surfaceSecondary: "#f3f4f6",
      surfaceHover: "#e5e7eb",
      text: "#111827",
      textSecondary: "#6b7280",
      textMuted: "#9ca3af",
      border: "#d1d5db",
      borderStrong: "#9ca3af",
      borderSubtle: "#e5e7eb",
    },
    typography: {
      fontFamily: "Inter, system-ui, sans-serif",
      baseSize: 16,
      scale: 1.25,
      weights: {
        regular: 400,
        medium: 500,
        semibold: 600,
        bold: 700,
      },
      lineHeights: {
        tight: 1.2,
        snug: 1.375,
        normal: 1.5,
        relaxed: 1.75,
      },
    },
    spacing: {
      baseUnit: 4,
      scale: [0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64],
    },
    borders: {
      thin: 1,
      default: 2,
      thick: 4,
      radiusSubtle: 8,
      radiusRelaxed: 12,
      radiusPill: 9999,
      defaultStyle: "solid",
    },
  };

  describe("basic generation", () => {
    it("should generate valid TypeScript syntax", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toBeTruthy();
      expect(result).toContain("import type");
      expect(result).toContain("export const theme:");
      expect(result).toContain("SpexopThemeConfig");
    });

    it("should include theme metadata in header", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain(mockTheme.meta.name);
      expect(result).toContain(mockTheme.meta.version);
      expect(result).toContain("Generated by @spexop/theme");
    });

    it("should import SpexopThemeConfig type", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("import type { SpexopThemeConfig }");
      expect(result).toContain("from '@spexop/theme'");
    });

    it("should export both named and default exports", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("export const theme:");
      expect(result).toContain("export default theme");
    });
  });

  describe("meta section", () => {
    it("should generate meta object with required fields", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("meta: {");
      expect(result).toContain('name: "Test Theme"');
      expect(result).toContain('version: "1.0.0"');
    });

    it("should include optional meta fields", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain('author: "Test Author"');
      expect(result).toContain('description: "A test theme"');
    });

    it("should handle missing optional meta fields", () => {
      const minimalTheme: SpexopThemeConfig = {
        ...mockTheme,
        meta: {
          name: "Minimal",
          version: "1.0.0",
        },
      };

      const result = generateTypeScript(minimalTheme);

      expect(result).not.toContain("author:");
      expect(result).not.toContain("description:");
    });
  });

  describe("colors section", () => {
    it("should generate all required colors", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("colors: {");
      expect(result).toContain('primary: "#3b82f6"');
      expect(result).toContain('surface: "#ffffff"');
      expect(result).toContain('text: "#111827"');
      expect(result).toContain('border: "#d1d5db"');
    });

    it("should generate optional color variants", () => {
      const themeWithVariants: SpexopThemeConfig = {
        ...mockTheme,
        colors: {
          ...mockTheme.colors,
          secondaryHover: "#059669",
          secondaryActive: "#047857",
        },
      };

      const result = generateTypeScript(themeWithVariants);

      expect(result).toContain("secondary:");
      expect(result).toContain("secondaryHover:");
      expect(result).toContain("secondaryActive:");
    });

    it("should generate semantic colors when present", () => {
      const themeWithSemantics: SpexopThemeConfig = {
        ...mockTheme,
        colors: {
          ...mockTheme.colors,
          success: "#10b981",
          warning: "#f59e0b",
          error: "#ef4444",
          info: "#3b82f6",
        },
      };

      const result = generateTypeScript(themeWithSemantics);

      expect(result).toContain('success: "#10b981"');
      expect(result).toContain('warning: "#f59e0b"');
      expect(result).toContain('error: "#ef4444"');
      expect(result).toContain('info: "#3b82f6"');
    });
  });

  describe("typography section", () => {
    it("should generate typography configuration", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("typography: {");
      expect(result).toContain('fontFamily: "Inter, system-ui, sans-serif"');
      expect(result).toContain("baseSize: 16");
      expect(result).toContain("scale: 1.25");
    });

    it("should generate font weights", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("weights: {");
      expect(result).toContain("regular: 400");
      expect(result).toContain("semibold: 600");
      expect(result).toContain("bold: 700");
    });

    it("should generate line heights", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("lineHeights: {");
      expect(result).toContain("tight: 1.2");
      expect(result).toContain("normal: 1.5");
      expect(result).toContain("relaxed: 1.75");
    });

    it("should handle optional font families", () => {
      const themeWithFonts: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          fontFamilyHeading: "'Playfair Display', serif",
          fontFamilyMono: "'Fira Code', monospace",
        },
      };

      const result = generateTypeScript(themeWithFonts);

      expect(result).toContain("fontFamilyHeading:");
      expect(result).toContain("Playfair Display");
      expect(result).toContain("fontFamilyMono:");
      expect(result).toContain("Fira Code");
    });
  });

  describe("spacing section", () => {
    it("should generate spacing configuration", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("spacing: {");
      expect(result).toContain("baseUnit: 4");
      expect(result).toContain("scale:");
    });

    it("should preserve spacing scale array", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("[0,4,8,12,16,20,24,32,40,48,64]");
    });

    it("should handle undefined scale", () => {
      const themeWithoutScale: SpexopThemeConfig = {
        ...mockTheme,
        spacing: {
          baseUnit: 4,
          scale: undefined,
        },
      };

      const result = generateTypeScript(themeWithoutScale);

      expect(result).toBeTruthy();
    });
  });

  describe("borders section", () => {
    it("should generate borders configuration", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("borders: {");
      expect(result).toContain("thin: 1");
      expect(result).toContain("default: 2");
      expect(result).toContain("thick: 4");
    });

    it("should generate radius values", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("radiusSubtle: 8");
      expect(result).toContain("radiusRelaxed: 12");
      expect(result).toContain("radiusPill: 9999");
    });

    it("should generate border style", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain('defaultStyle: "solid"');
    });
  });

  describe("breakpoints section", () => {
    it("should generate breakpoints when present", () => {
      const themeWithBreakpoints: SpexopThemeConfig = {
        ...mockTheme,
        breakpoints: {
          xs: 320,
          sm: 640,
          md: 768,
          lg: 1024,
          xl: 1280,
          "2xl": 1536,
        },
      };

      const result = generateTypeScript(themeWithBreakpoints);

      expect(result).toContain("breakpoints:");
      expect(result).toContain('"xs": 320');
      expect(result).toContain('"sm": 640');
      expect(result).toContain('"2xl": 1536');
    });

    it("should omit breakpoints when not provided", () => {
      const result = generateTypeScript(mockTheme);

      // Mock theme doesn't have breakpoints
      expect(result).not.toContain("breakpoints:");
    });
  });

  describe("dark mode section", () => {
    it("should generate dark mode configuration when enabled", () => {
      const themeWithDarkMode: SpexopThemeConfig = {
        ...mockTheme,
        darkMode: {
          enabled: true,
          colors: {
            surface: "#1f2937",
            text: "#f9fafb",
          },
        },
      };

      const result = generateTypeScript(themeWithDarkMode);

      expect(result).toContain("darkMode: {");
      expect(result).toContain("enabled: true");
      expect(result).toContain("colors:");
    });

    it("should omit dark mode when not enabled", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).not.toContain("darkMode:");
    });
  });

  describe("JSON formatting", () => {
    it("should properly escape strings", () => {
      const themeWithQuotes: SpexopThemeConfig = {
        ...mockTheme,
        meta: {
          name: 'Test "Theme"',
          version: "1.0.0",
        },
      };

      const result = generateTypeScript(themeWithQuotes);

      expect(result).toContain('\\"Theme\\"');
    });

    it("should handle numeric values without quotes", () => {
      const result = generateTypeScript(mockTheme);

      expect(result).toContain("baseSize: 16");
      expect(result).not.toContain('"16"');
    });

    it("should format nested objects correctly", () => {
      const result = generateTypeScript(mockTheme);

      // Check proper nesting
      expect(result).toMatch(/colors:\s*{/);
      expect(result).toMatch(/typography:\s*{/);
      expect(result).toMatch(/weights:\s*{/);
    });
  });

  describe("edge cases", () => {
    it("should handle empty optional objects", () => {
      const minimalTheme: SpexopThemeConfig = {
        meta: {
          name: "Minimal",
          version: "1.0.0",
        },
        colors: {
          primary: "#000000",
          surface: "#ffffff",
          surfaceSecondary: "#f0f0f0",
          surfaceHover: "#e0e0e0",
          text: "#000000",
          textSecondary: "#666666",
          textMuted: "#999999",
          border: "#cccccc",
          borderStrong: "#999999",
          borderSubtle: "#e0e0e0",
        },
        typography: {
          fontFamily: "sans-serif",
          baseSize: 16,
          scale: 1.2,
          weights: { regular: 400, medium: 500, semibold: 600, bold: 700 },
          lineHeights: { tight: 1.2, snug: 1.375, normal: 1.5, relaxed: 1.75 },
        },
        spacing: {
          baseUnit: 4,
          scale: undefined,
        },
        borders: {
          default: 1,
          thin: 1,
          thick: 2,
          radiusSubtle: 4,
          radiusRelaxed: 8,
          radiusPill: 999,
          defaultStyle: "solid",
        },
      };

      const result = generateTypeScript(minimalTheme);

      expect(result).toBeTruthy();
      expect(result).toContain("export const theme:");
    });

    it("should handle special characters in values", () => {
      const themeWithSpecialChars: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          fontFamily: "'Comic Sans', 'Comic Sans MS', cursive",
        },
      };

      const result = generateTypeScript(themeWithSpecialChars);

      expect(result).toContain("Comic Sans");
    });

    it("should maintain decimal precision", () => {
      const themeWithDecimals: SpexopThemeConfig = {
        ...mockTheme,
        typography: {
          ...mockTheme.typography,
          scale: 1.618033988, // Golden ratio
        },
      };

      const result = generateTypeScript(themeWithDecimals);

      expect(result).toContain("1.618033988");
    });
  });

  describe("output validation", () => {
    it("should generate syntactically valid TypeScript", () => {
      const result = generateTypeScript(mockTheme);

      // Should have proper structure
      expect(result).toMatch(/import type.*from/);
      expect(result).toMatch(/export const.*:/);
      expect(result).toMatch(/export default/);
    });

    it("should properly close all objects", () => {
      const result = generateTypeScript(mockTheme);

      // Count opening and closing braces (should match)
      const openBraces = (result.match(/{/g) || []).length;
      const closeBraces = (result.match(/}/g) || []).length;

      expect(openBraces).toBe(closeBraces);
    });

    it("should maintain consistent indentation", () => {
      const result = generateTypeScript(mockTheme);

      // Check for proper indentation patterns
      expect(result).toMatch(/^\s{2}meta:/m);
      expect(result).toMatch(/^\s{2}colors:/m);
      expect(result).toMatch(/^\s{4}\w+:/m); // Nested properties
    });
  });
});
