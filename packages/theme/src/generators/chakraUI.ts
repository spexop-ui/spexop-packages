/**
 * Chakra UI Theme Generator
 * Generates Chakra UI theme configuration
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate Chakra UI theme
 *
 * @param config - Spexop theme configuration
 * @returns Chakra UI theme TypeScript string
 */
export function generateChakraUI(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - Chakra UI Theme
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

import { extendTheme } from '@chakra-ui/react';

export const theme = extendTheme({
  colors: {
    primary: {
      50: ${JSON.stringify(colors.surfaceHover)},
      100: ${JSON.stringify(colors.surfaceSecondary)},
      200: ${JSON.stringify(colors.border)},
      300: ${JSON.stringify(colors.borderStrong)},
      400: ${JSON.stringify(colors.primaryHover || colors.primary)},
      500: ${JSON.stringify(colors.primary)},
      600: ${JSON.stringify(colors.primaryActive || colors.primary)},
      700: ${JSON.stringify(colors.primaryActive || colors.primary)},
      800: ${JSON.stringify(colors.text)},
      900: ${JSON.stringify(colors.text)},
    },
    ${
      colors.secondary
        ? `secondary: {
      500: ${JSON.stringify(colors.secondary)},
      600: ${JSON.stringify(colors.secondaryHover || colors.secondary)},
      700: ${JSON.stringify(colors.secondaryActive || colors.secondary)},
    },`
        : ""
    }
    surface: {
      DEFAULT: ${JSON.stringify(colors.surface)},
      secondary: ${JSON.stringify(colors.surfaceSecondary)},
      hover: ${JSON.stringify(colors.surfaceHover)},
    },
    text: {
      DEFAULT: ${JSON.stringify(colors.text)},
      secondary: ${JSON.stringify(colors.textSecondary)},
      muted: ${JSON.stringify(colors.textMuted)},
    },
    border: {
      DEFAULT: ${JSON.stringify(colors.border)},
      strong: ${JSON.stringify(colors.borderStrong)},
      subtle: ${JSON.stringify(colors.borderSubtle)},
    },
  },
  fonts: {
    body: ${JSON.stringify(typography.fontFamily)},
    heading: ${JSON.stringify(typography.fontFamilyHeading || typography.fontFamily)},
    ${typography.fontFamilyMono ? `mono: ${JSON.stringify(typography.fontFamilyMono)},` : ""}
  },
  fontSizes: {
    xs: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale ** 2)}px`)},
    sm: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale)}px`)},
    md: ${JSON.stringify(`${typography.baseSize}px`)},
    lg: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale)}px`)},
    xl: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 2)}px`)},
    '2xl': ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 3)}px`)},
  },
  fontWeights: {
    normal: ${typography.weights.regular},
    semibold: ${typography.weights.semibold},
    bold: ${typography.weights.bold},
  },
  lineHeights: {
    tight: ${typography.lineHeights.tight},
    normal: ${typography.lineHeights.normal},
    relaxed: ${typography.lineHeights.relaxed},
  },
  space: ${JSON.stringify(
    Object.entries(spacingValues).reduce(
      (acc, [k, v]) => {
        acc[k] = `${v}px`;
        return acc;
      },
      {} as Record<string, string>,
    ),
    null,
    2,
  )},
  radii: {
    subtle: ${JSON.stringify(`${borders.radiusSubtle}px`)},
    relaxed: ${JSON.stringify(`${borders.radiusRelaxed}px`)},
    pill: ${JSON.stringify(`${borders.radiusPill}px`)},
  },
  breakpoints: {
    xs: ${JSON.stringify(`${breakpoints?.xs || 320}px`)},
    sm: ${JSON.stringify(`${breakpoints?.sm || 640}px`)},
    md: ${JSON.stringify(`${breakpoints?.md || 768}px`)},
    lg: ${JSON.stringify(`${breakpoints?.lg || 1024}px`)},
    xl: ${JSON.stringify(`${breakpoints?.xl || 1280}px`)},
    '2xl': ${JSON.stringify(`${breakpoints?.["2xl"] || 1536}px`)},
  },
});

export default theme;
`;
}
