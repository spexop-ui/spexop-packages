/**
 * Emotion Theme Generator
 * Generates Emotion theme object from theme config
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate Emotion theme object
 *
 * @param config - Spexop theme configuration
 * @returns Emotion theme TypeScript/JavaScript string
 */
export function generateEmotion(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  // Generate spacing values
  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - Emotion Theme
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

import '@emotion/react';

declare module '@emotion/react' {
  export interface Theme {
    colors: {
      primary: string;
      primaryHover: string;
      primaryActive: string;
      ${colors.secondary ? "secondary: string;" : ""}
      surface: string;
      surfaceSecondary: string;
      surfaceHover: string;
      text: string;
      textSecondary: string;
      textMuted: string;
      border: string;
      borderStrong: string;
      borderSubtle: string;
      ${colors.success ? "success: string;" : ""}
      ${colors.warning ? "warning: string;" : ""}
      ${colors.error ? "error: string;" : ""}
      ${colors.info ? "info: string;" : ""}
    };
    spacing: Record<string, string>;
    typography: {
      fontFamily: string;
      fontFamilyHeading: string;
      ${typography.fontFamilyMono ? "fontFamilyMono: string;" : ""}
      fontSize: {
        xs: string;
        sm: string;
        base: string;
        lg: string;
        xl: string;
        '2xl': string;
      };
      fontWeight: {
        regular: number;
        semibold: number;
        bold: number;
      };
      lineHeight: {
        tight: number;
        normal: number;
        relaxed: number;
      };
    };
    borders: {
      width: {
        thin: string;
        default: string;
        thick: string;
      };
      radius: {
        subtle: string;
        relaxed: string;
        pill: string;
      };
      style: string;
    };
    breakpoints: {
      xs: string;
      sm: string;
      md: string;
      lg: string;
      xl: string;
      '2xl': string;
    };
  }
}

export const theme: Theme = {
  colors: {
    primary: ${JSON.stringify(colors.primary)},
    primaryHover: ${JSON.stringify(colors.primaryHover || colors.primary)},
    primaryActive: ${JSON.stringify(colors.primaryActive || colors.primary)},
    ${colors.secondary ? `secondary: ${JSON.stringify(colors.secondary)},` : ""}
    surface: ${JSON.stringify(colors.surface)},
    surfaceSecondary: ${JSON.stringify(colors.surfaceSecondary)},
    surfaceHover: ${JSON.stringify(colors.surfaceHover)},
    text: ${JSON.stringify(colors.text)},
    textSecondary: ${JSON.stringify(colors.textSecondary)},
    textMuted: ${JSON.stringify(colors.textMuted)},
    border: ${JSON.stringify(colors.border)},
    borderStrong: ${JSON.stringify(colors.borderStrong)},
    borderSubtle: ${JSON.stringify(colors.borderSubtle)},
    ${colors.success ? `success: ${JSON.stringify(colors.success)},` : ""}
    ${colors.warning ? `warning: ${JSON.stringify(colors.warning)},` : ""}
    ${colors.error ? `error: ${JSON.stringify(colors.error)},` : ""}
    ${colors.info ? `info: ${JSON.stringify(colors.info)},` : ""}
  },
  spacing: ${JSON.stringify(
    Object.entries(spacingValues).reduce(
      (acc, [key, value]) => {
        acc[key] = `${value}px`;
        return acc;
      },
      {} as Record<string, string>,
    ),
    null,
    2,
  )},
  typography: {
    fontFamily: ${JSON.stringify(typography.fontFamily)},
    fontFamilyHeading: ${JSON.stringify(typography.fontFamilyHeading || typography.fontFamily)},
    ${typography.fontFamilyMono ? `fontFamilyMono: ${JSON.stringify(typography.fontFamilyMono)},` : ""}
    fontSize: {
      xs: ${JSON.stringify(`${Math.round(typography.baseSize / (typography.scale * typography.scale))}px`)},
      sm: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale)}px`)},
      base: ${JSON.stringify(`${typography.baseSize}px`)},
      lg: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale)}px`)},
      xl: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale * typography.scale)}px`)},
      '2xl': ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 3)}px`)},
    },
    fontWeight: {
      regular: ${typography.weights.regular},
      semibold: ${typography.weights.semibold},
      bold: ${typography.weights.bold},
    },
    lineHeight: {
      tight: ${typography.lineHeights.tight},
      normal: ${typography.lineHeights.normal},
      relaxed: ${typography.lineHeights.relaxed},
    },
  },
  borders: {
    width: {
      thin: ${JSON.stringify(`${borders.thin}px`)},
      default: ${JSON.stringify(`${borders.default}px`)},
      thick: ${JSON.stringify(`${borders.thick}px`)},
    },
    radius: {
      subtle: ${JSON.stringify(`${borders.radiusSubtle}px`)},
      relaxed: ${JSON.stringify(`${borders.radiusRelaxed}px`)},
      pill: ${JSON.stringify(`${borders.radiusPill}px`)},
    },
    style: ${JSON.stringify(borders.defaultStyle)},
  },
  breakpoints: {
    xs: ${JSON.stringify(`${breakpoints?.xs || 320}px`)},
    sm: ${JSON.stringify(`${breakpoints?.sm || 640}px`)},
    md: ${JSON.stringify(`${breakpoints?.md || 768}px`)},
    lg: ${JSON.stringify(`${breakpoints?.lg || 1024}px`)},
    xl: ${JSON.stringify(`${breakpoints?.xl || 1280}px`)},
    '2xl': ${JSON.stringify(`${breakpoints?.["2xl"] || 1536}px`)},
  },
};

export default theme;
`;
}
