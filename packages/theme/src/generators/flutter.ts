/**
 * Flutter Theme Generator
 * Generates Flutter/Dart theme configuration
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Convert hex to Flutter Color
 */
function hexToFlutter(hex: string): string {
  const cleaned = hex.replace("#", "");
  return `Color(0xFF${cleaned.toUpperCase()})`;
}

/**
 * Generate Flutter theme
 *
 * @param config - Spexop theme configuration
 * @returns Flutter Dart theme string
 */
export function generateFlutter(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders } = config;

  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - Flutter Theme
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

import 'package:flutter/material.dart';

class AppTheme {
  // Colors
  static const Color primary = ${hexToFlutter(colors.primary)};
  static const Color primaryHover = ${hexToFlutter(colors.primaryHover || colors.primary)};
  static const Color primaryActive = ${hexToFlutter(colors.primaryActive || colors.primary)};
  ${colors.secondary ? `static const Color secondary = ${hexToFlutter(colors.secondary)};` : ""}
  static const Color surface = ${hexToFlutter(colors.surface)};
  static const Color surfaceSecondary = ${hexToFlutter(colors.surfaceSecondary)};
  static const Color text = ${hexToFlutter(colors.text)};
  static const Color textSecondary = ${hexToFlutter(colors.textSecondary)};
  static const Color border = ${hexToFlutter(colors.border)};
  ${colors.success ? `static const Color success = ${hexToFlutter(colors.success)};` : ""}
  ${colors.warning ? `static const Color warning = ${hexToFlutter(colors.warning)};` : ""}
  ${colors.error ? `static const Color error = ${hexToFlutter(colors.error)};` : ""}

  // Spacing
${Object.entries(spacingValues)
  .map(([k, v]) => `  static const double spacing${k} = ${v}.0;`)
  .join("\n")}

  // Typography
  static const String fontFamily = '${typography.fontFamily.split(",")[0].trim().replace(/['"]/g, "")}';
  static const double fontSizeBase = ${typography.baseSize}.0;
  static const double fontSizeSm = ${Math.round(typography.baseSize / typography.scale)}.0;
  static const double fontSizeLg = ${Math.round(typography.baseSize * typography.scale)}.0;
  static const double fontSizeXl = ${Math.round(typography.baseSize * typography.scale ** 2)}.0;

  // Font Weights
  static const FontWeight fontWeightRegular = FontWeight.w${typography.weights.regular};
  static const FontWeight fontWeightSemibold = FontWeight.w${typography.weights.semibold};
  static const FontWeight fontWeightBold = FontWeight.w${typography.weights.bold};

  // Border Radius
  static const double radiusSubtle = ${borders.radiusSubtle}.0;
  static const double radiusRelaxed = ${borders.radiusRelaxed}.0;
  static const double radiusPill = ${borders.radiusPill}.0;

  // Material Theme Data
  static ThemeData get lightTheme {
    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.light(
        primary: primary,
        ${colors.secondary ? "secondary: secondary," : ""}
        surface: surface,
        onSurface: text,
        ${colors.error ? "error: error," : ""}
      ),
      textTheme: TextTheme(
        bodyLarge: TextStyle(
          fontFamily: fontFamily,
          fontSize: fontSizeBase,
          fontWeight: fontWeightRegular,
          color: text,
        ),
        bodyMedium: TextStyle(
          fontFamily: fontFamily,
          fontSize: fontSizeSm,
          fontWeight: fontWeightRegular,
          color: textSecondary,
        ),
        headlineLarge: TextStyle(
          fontFamily: fontFamily,
          fontSize: fontSizeXl,
          fontWeight: fontWeightBold,
          color: text,
        ),
      ),
    );
  }
}
`;
}
