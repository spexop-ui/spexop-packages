/**
 * Panda CSS Config Generator
 * Generates Panda CSS configuration
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate Panda CSS configuration
 *
 * @param config - Spexop theme configuration
 * @returns Panda CSS config TypeScript string
 */
export function generatePandaCSS(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - Panda CSS Configuration
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

import { defineConfig } from '@pandacss/dev';

export default defineConfig({
  theme: {
    extend: {
      tokens: {
        colors: {
          primary: { value: ${JSON.stringify(colors.primary)} },
          primaryHover: { value: ${JSON.stringify(colors.primaryHover || colors.primary)} },
          primaryActive: { value: ${JSON.stringify(colors.primaryActive || colors.primary)} },
          ${colors.secondary ? `secondary: { value: ${JSON.stringify(colors.secondary)} },` : ""}
          surface: { value: ${JSON.stringify(colors.surface)} },
          surfaceSecondary: { value: ${JSON.stringify(colors.surfaceSecondary)} },
          surfaceHover: { value: ${JSON.stringify(colors.surfaceHover)} },
          text: { value: ${JSON.stringify(colors.text)} },
          textSecondary: { value: ${JSON.stringify(colors.textSecondary)} },
          textMuted: { value: ${JSON.stringify(colors.textMuted)} },
          border: { value: ${JSON.stringify(colors.border)} },
          borderStrong: { value: ${JSON.stringify(colors.borderStrong)} },
          borderSubtle: { value: ${JSON.stringify(colors.borderSubtle)} },
          ${colors.success ? `success: { value: ${JSON.stringify(colors.success)} },` : ""}
          ${colors.warning ? `warning: { value: ${JSON.stringify(colors.warning)} },` : ""}
          ${colors.error ? `error: { value: ${JSON.stringify(colors.error)} },` : ""}
          ${colors.info ? `info: { value: ${JSON.stringify(colors.info)} },` : ""}
        },
        spacing: ${JSON.stringify(
          Object.entries(spacingValues).reduce(
            (acc, [k, v]) => {
              acc[k] = { value: `${v}px` };
              return acc;
            },
            {} as Record<string, { value: string }>,
          ),
          null,
          2,
        )},
        fonts: {
          body: { value: ${JSON.stringify(typography.fontFamily)} },
          heading: { value: ${JSON.stringify(typography.fontFamilyHeading || typography.fontFamily)} },
          ${typography.fontFamilyMono ? `mono: { value: ${JSON.stringify(typography.fontFamilyMono)} },` : ""}
        },
        fontSizes: {
          xs: { value: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale ** 2)}px`)} },
          sm: { value: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale)}px`)} },
          base: { value: ${JSON.stringify(`${typography.baseSize}px`)} },
          lg: { value: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale)}px`)} },
          xl: { value: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 2)}px`)} },
          '2xl': { value: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 3)}px`)} },
        },
        fontWeights: {
          regular: { value: ${typography.weights.regular} },
          semibold: { value: ${typography.weights.semibold} },
          bold: { value: ${typography.weights.bold} },
        },
        radii: {
          subtle: { value: ${JSON.stringify(`${borders.radiusSubtle}px`)} },
          relaxed: { value: ${JSON.stringify(`${borders.radiusRelaxed}px`)} },
          pill: { value: ${JSON.stringify(`${borders.radiusPill}px`)} },
        },
      },
      breakpoints: {
        xs: ${JSON.stringify(`${breakpoints?.xs || 320}px`)},
        sm: ${JSON.stringify(`${breakpoints?.sm || 640}px`)},
        md: ${JSON.stringify(`${breakpoints?.md || 768}px`)},
        lg: ${JSON.stringify(`${breakpoints?.lg || 1024}px`)},
        xl: ${JSON.stringify(`${breakpoints?.xl || 1280}px`)},
        '2xl': ${JSON.stringify(`${breakpoints?.["2xl"] || 1536}px`)},
      },
    },
  },
});
`;
}
