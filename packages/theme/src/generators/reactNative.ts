/**
 * React Native Theme Generator
 * Generates React Native StyleSheet theme
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate React Native theme
 *
 * @param config - Spexop theme configuration
 * @returns React Native theme TypeScript string
 */
export function generateReactNative(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders } = config;

  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - React Native Theme
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

export const theme = {
  colors: {
    primary: ${JSON.stringify(colors.primary)},
    primaryHover: ${JSON.stringify(colors.primaryHover || colors.primary)},
    primaryActive: ${JSON.stringify(colors.primaryActive || colors.primary)},
    ${colors.secondary ? `secondary: ${JSON.stringify(colors.secondary)},` : ""}
    surface: ${JSON.stringify(colors.surface)},
    surfaceSecondary: ${JSON.stringify(colors.surfaceSecondary)},
    surfaceHover: ${JSON.stringify(colors.surfaceHover)},
    text: ${JSON.stringify(colors.text)},
    textSecondary: ${JSON.stringify(colors.textSecondary)},
    textMuted: ${JSON.stringify(colors.textMuted)},
    border: ${JSON.stringify(colors.border)},
    borderStrong: ${JSON.stringify(colors.borderStrong)},
    borderSubtle: ${JSON.stringify(colors.borderSubtle)},
    ${colors.success ? `success: ${JSON.stringify(colors.success)},` : ""}
    ${colors.warning ? `warning: ${JSON.stringify(colors.warning)},` : ""}
    ${colors.error ? `error: ${JSON.stringify(colors.error)},` : ""}
    ${colors.info ? `info: ${JSON.stringify(colors.info)},` : ""}
  },
  spacing: ${JSON.stringify(spacingValues, null, 2)},
  typography: {
    fontFamily: ${JSON.stringify(typography.fontFamily.split(",")[0].trim().replace(/['"]/g, ""))},
    fontFamilyHeading: ${JSON.stringify((typography.fontFamilyHeading || typography.fontFamily).split(",")[0].trim().replace(/['"]/g, ""))},
    fontSize: {
      xs: ${Math.round(typography.baseSize / (typography.scale * typography.scale))},
      sm: ${Math.round(typography.baseSize / typography.scale)},
      base: ${typography.baseSize},
      lg: ${Math.round(typography.baseSize * typography.scale)},
      xl: ${Math.round(typography.baseSize * typography.scale * typography.scale)},
      '2xl': ${Math.round(typography.baseSize * typography.scale ** 3)},
    },
    fontWeight: {
      regular: ${JSON.stringify(typography.weights.regular.toString())},
      semibold: ${JSON.stringify(typography.weights.semibold.toString())},
      bold: ${JSON.stringify(typography.weights.bold.toString())},
    },
    lineHeight: {
      tight: ${typography.lineHeights.tight},
      normal: ${typography.lineHeights.normal},
      relaxed: ${typography.lineHeights.relaxed},
    },
  },
  borders: {
    width: {
      thin: ${borders.thin},
      default: ${borders.default},
      thick: ${borders.thick},
    },
    radius: {
      subtle: ${borders.radiusSubtle},
      relaxed: ${borders.radiusRelaxed},
      pill: ${borders.radiusPill},
    },
  },
};

// Usage in components:
// import { theme } from './theme';
//
// const styles = StyleSheet.create({
//   button: {
//     backgroundColor: theme.colors.primary,
//     padding: theme.spacing[3],
//     borderRadius: theme.borders.radius.relaxed,
//   },
// });

export default theme;
`;
}
