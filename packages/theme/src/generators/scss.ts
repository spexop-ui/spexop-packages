/**
 * SCSS Variables Generator
 * Generates SCSS variables from theme config
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate SCSS variables
 *
 * @param config - Spexop theme configuration
 * @returns SCSS variables string
 */
export function generateSCSS(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  // Generate spacing values
  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - SCSS Variables
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

// === Colors ===

// Primary
$theme-primary: ${colors.primary};
$theme-primary-hover: ${colors.primaryHover || colors.primary};
$theme-primary-active: ${colors.primaryActive || colors.primary};

// Secondary
${colors.secondary ? `$theme-secondary: ${colors.secondary};` : ""}
${colors.secondaryHover ? `$theme-secondary-hover: ${colors.secondaryHover};` : ""}
${colors.secondaryActive ? `$theme-secondary-active: ${colors.secondaryActive};` : ""}

// Surface
$theme-surface: ${colors.surface};
$theme-surface-secondary: ${colors.surfaceSecondary};
$theme-surface-hover: ${colors.surfaceHover};

// Text
$theme-text: ${colors.text};
$theme-text-secondary: ${colors.textSecondary};
$theme-text-muted: ${colors.textMuted};

// Border
$theme-border: ${colors.border};
$theme-border-strong: ${colors.borderStrong};
$theme-border-subtle: ${colors.borderSubtle};

// Semantic
${colors.success ? `$theme-success: ${colors.success};` : ""}
${colors.warning ? `$theme-warning: ${colors.warning};` : ""}
${colors.error ? `$theme-error: ${colors.error};` : ""}
${colors.info ? `$theme-info: ${colors.info};` : ""}

// === Spacing ===

$theme-spacing: (
${Object.entries(spacingValues)
  .map(([key, value]) => `  ${key}: ${value}px,`)
  .join("\n")}
);

// Individual spacing variables
${Object.entries(spacingValues)
  .map(([key, value]) => `$theme-spacing-${key}: ${value}px;`)
  .join("\n")}

// === Typography ===

// Font Families
$theme-font-family: ${typography.fontFamily};
$theme-font-family-heading: ${typography.fontFamilyHeading || typography.fontFamily};
${typography.fontFamilyMono ? `$theme-font-family-mono: ${typography.fontFamilyMono};` : ""}

// Font Sizes
$theme-font-size-xs: ${Math.round(typography.baseSize / (typography.scale * typography.scale))}px;
$theme-font-size-sm: ${Math.round(typography.baseSize / typography.scale)}px;
$theme-font-size-base: ${typography.baseSize}px;
$theme-font-size-lg: ${Math.round(typography.baseSize * typography.scale)}px;
$theme-font-size-xl: ${Math.round(typography.baseSize * typography.scale * typography.scale)}px;
$theme-font-size-2xl: ${Math.round(typography.baseSize * typography.scale ** 3)}px;
$theme-font-size-3xl: ${Math.round(typography.baseSize * typography.scale ** 4)}px;

// Font Weights
$theme-font-weight-regular: ${typography.weights.regular};
$theme-font-weight-semibold: ${typography.weights.semibold};
$theme-font-weight-bold: ${typography.weights.bold};

// Line Heights
$theme-line-height-tight: ${typography.lineHeights.tight};
$theme-line-height-normal: ${typography.lineHeights.normal};
$theme-line-height-relaxed: ${typography.lineHeights.relaxed};

// === Borders ===

// Widths
$theme-border-thin: ${borders.thin}px;
$theme-border-width: ${borders.default}px;
$theme-border-thick: ${borders.thick}px;

// Radius
$theme-radius-subtle: ${borders.radiusSubtle}px;
$theme-radius-relaxed: ${borders.radiusRelaxed}px;
$theme-radius-pill: ${borders.radiusPill}px;

// Style
$theme-border-style: ${borders.defaultStyle};

// === Breakpoints ===

$theme-breakpoints: (
  xs: ${breakpoints?.xs || 320}px,
  sm: ${breakpoints?.sm || 640}px,
  md: ${breakpoints?.md || 768}px,
  lg: ${breakpoints?.lg || 1024}px,
  xl: ${breakpoints?.xl || 1280}px,
  2xl: ${breakpoints?.["2xl"] || 1536}px,
);

// Individual breakpoint variables
$theme-breakpoint-xs: ${breakpoints?.xs || 320}px;
$theme-breakpoint-sm: ${breakpoints?.sm || 640}px;
$theme-breakpoint-md: ${breakpoints?.md || 768}px;
$theme-breakpoint-lg: ${breakpoints?.lg || 1024}px;
$theme-breakpoint-xl: ${breakpoints?.xl || 1280}px;
$theme-breakpoint-2xl: ${breakpoints?.["2xl"] || 1536}px;

// === Helper Mixins ===

@mixin theme-text-style($size: 'base', $weight: 'normal') {
  font-family: $theme-font-family;
  font-size: map-get((
    'xs': $theme-font-size-xs,
    'sm': $theme-font-size-sm,
    'base': $theme-font-size-base,
    'lg': $theme-font-size-lg,
    'xl': $theme-font-size-xl,
  ), $size);
  font-weight: map-get((
    'normal': $theme-font-weight-regular,
    'semibold': $theme-font-weight-semibold,
    'bold': $theme-font-weight-bold,
  ), $weight);
}

@mixin theme-button-base {
  font-family: $theme-font-family;
  font-weight: $theme-font-weight-semibold;
  border: $theme-border-width solid $theme-border;
  border-radius: $theme-radius-relaxed;
  padding: $theme-spacing-3 $theme-spacing-5;
  transition: all 150ms ease-in-out;
}
`;
}
