/**
 * Svelte Theme Generator
 * Generates Svelte-compatible theme configuration
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate Svelte theme
 *
 * @param config - Spexop theme configuration
 * @returns Svelte theme JavaScript string
 */
export function generateSvelte(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - Svelte Theme
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

export const theme = {
  colors: {
    primary: ${JSON.stringify(colors.primary)},
    primaryHover: ${JSON.stringify(colors.primaryHover || colors.primary)},
    primaryActive: ${JSON.stringify(colors.primaryActive || colors.primary)},
    ${colors.secondary ? `secondary: ${JSON.stringify(colors.secondary)},` : ""}
    surface: ${JSON.stringify(colors.surface)},
    surfaceSecondary: ${JSON.stringify(colors.surfaceSecondary)},
    surfaceHover: ${JSON.stringify(colors.surfaceHover)},
    text: ${JSON.stringify(colors.text)},
    textSecondary: ${JSON.stringify(colors.textSecondary)},
    textMuted: ${JSON.stringify(colors.textMuted)},
    border: ${JSON.stringify(colors.border)},
    borderStrong: ${JSON.stringify(colors.borderStrong)},
    borderSubtle: ${JSON.stringify(colors.borderSubtle)},
    ${colors.success ? `success: ${JSON.stringify(colors.success)},` : ""}
    ${colors.warning ? `warning: ${JSON.stringify(colors.warning)},` : ""}
    ${colors.error ? `error: ${JSON.stringify(colors.error)},` : ""}
    ${colors.info ? `info: ${JSON.stringify(colors.info)},` : ""}
  },
  spacing: ${JSON.stringify(spacingValues, null, 2)},
  typography: {
    fontFamily: ${JSON.stringify(typography.fontFamily)},
    fontFamilyHeading: ${JSON.stringify(typography.fontFamilyHeading || typography.fontFamily)},
    ${typography.fontFamilyMono ? `fontFamilyMono: ${JSON.stringify(typography.fontFamilyMono)},` : ""}
    fontSize: {
      xs: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale ** 2)}px`)},
      sm: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale)}px`)},
      base: ${JSON.stringify(`${typography.baseSize}px`)},
      lg: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale)}px`)},
      xl: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 2)}px`)},
      '2xl': ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 3)}px`)},
    },
    fontWeight: {
      regular: ${typography.weights.regular},
      semibold: ${typography.weights.semibold},
      bold: ${typography.weights.bold},
    },
    lineHeight: {
      tight: ${typography.lineHeights.tight},
      normal: ${typography.lineHeights.normal},
      relaxed: ${typography.lineHeights.relaxed},
    },
  },
  borders: {
    width: {
      thin: ${borders.thin},
      default: ${borders.default},
      thick: ${borders.thick},
    },
    radius: {
      subtle: ${borders.radiusSubtle},
      relaxed: ${borders.radiusRelaxed},
      pill: ${borders.radiusPill},
    },
  },
  breakpoints: {
    xs: ${breakpoints?.xs || 320},
    sm: ${breakpoints?.sm || 640},
    md: ${breakpoints?.md || 768},
    lg: ${breakpoints?.lg || 1024},
    xl: ${breakpoints?.xl || 1280},
    '2xl': ${breakpoints?.["2xl"] || 1536},
  },
};

// Usage in Svelte components:
// <script>
//   import { theme } from './theme';
// </script>
//
// <button style="color: {theme.colors.primary}">
//   Click me
// </button>
`;
}
