/**
 * Tailwind CSS Config Generator
 * Generates Tailwind configuration from theme config
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate Tailwind configuration
 *
 * @param config - Spexop theme configuration
 * @returns Tailwind config JavaScript string
 */
export function generateTailwind(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  // Generate spacing values
  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  // Convert spacing to Tailwind format
  const spacingConfig = Object.entries(spacingValues).reduce(
    (acc, [key, value]) => {
      acc[key] = `${value}px`;
      return acc;
    },
    {} as Record<string, string>,
  );

  return `/**
 * ${config.meta.name} - Tailwind Configuration
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    './src/**/*.{js,jsx,ts,tsx}',
    './public/index.html',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: ${JSON.stringify(colors.primary)},
          hover: ${JSON.stringify(colors.primaryHover || colors.primary)},
          active: ${JSON.stringify(colors.primaryActive || colors.primary)},
        },
        ${
          colors.secondary
            ? `secondary: {
          DEFAULT: ${JSON.stringify(colors.secondary)},
          hover: ${JSON.stringify(colors.secondaryHover || colors.secondary)},
          active: ${JSON.stringify(colors.secondaryActive || colors.secondary)},
        },`
            : ""
        }
        surface: {
          DEFAULT: ${JSON.stringify(colors.surface)},
          secondary: ${JSON.stringify(colors.surfaceSecondary)},
          hover: ${JSON.stringify(colors.surfaceHover)},
        },
        text: {
          DEFAULT: ${JSON.stringify(colors.text)},
          secondary: ${JSON.stringify(colors.textSecondary)},
          muted: ${JSON.stringify(colors.textMuted)},
        },
        border: {
          DEFAULT: ${JSON.stringify(colors.border)},
          strong: ${JSON.stringify(colors.borderStrong)},
          subtle: ${JSON.stringify(colors.borderSubtle)},
        },
        ${colors.success ? `success: ${JSON.stringify(colors.success)},` : ""}
        ${colors.warning ? `warning: ${JSON.stringify(colors.warning)},` : ""}
        ${colors.error ? `error: ${JSON.stringify(colors.error)},` : ""}
        ${colors.info ? `info: ${JSON.stringify(colors.info)},` : ""}
      },
      fontFamily: {
        sans: [${typography.fontFamily}],
        ${typography.fontFamilyHeading ? `heading: [${typography.fontFamilyHeading}],` : ""}
        ${typography.fontFamilyMono ? `mono: [${typography.fontFamilyMono}],` : ""}
      },
      fontSize: {
        xs: [${JSON.stringify(`${Math.round(typography.baseSize / (typography.scale * typography.scale))}px`)}, { lineHeight: ${JSON.stringify(typography.lineHeights.tight.toString())} }],
        sm: [${JSON.stringify(`${Math.round(typography.baseSize / typography.scale)}px`)}, { lineHeight: ${JSON.stringify(typography.lineHeights.normal.toString())} }],
        base: [${JSON.stringify(`${typography.baseSize}px`)}, { lineHeight: ${JSON.stringify(typography.lineHeights.normal.toString())} }],
        lg: [${JSON.stringify(`${Math.round(typography.baseSize * typography.scale)}px`)}, { lineHeight: ${JSON.stringify(typography.lineHeights.normal.toString())} }],
        xl: [${JSON.stringify(`${Math.round(typography.baseSize * typography.scale * typography.scale)}px`)}, { lineHeight: ${JSON.stringify(typography.lineHeights.tight.toString())} }],
        '2xl': [${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 3)}px`)}, { lineHeight: ${JSON.stringify(typography.lineHeights.tight.toString())} }],
      },
      fontWeight: {
        normal: ${typography.weights.regular},
        semibold: ${typography.weights.semibold},
        bold: ${typography.weights.bold},
      },
      spacing: ${JSON.stringify(spacingConfig, null, 2)},
      borderWidth: {
        thin: ${JSON.stringify(`${borders.thin}px`)},
        DEFAULT: ${JSON.stringify(`${borders.default}px`)},
        thick: ${JSON.stringify(`${borders.thick}px`)},
      },
      borderRadius: {
        subtle: ${JSON.stringify(`${borders.radiusSubtle}px`)},
        relaxed: ${JSON.stringify(`${borders.radiusRelaxed}px`)},
        pill: ${JSON.stringify(`${borders.radiusPill}px`)},
      },
      ${
        breakpoints
          ? `screens: {
        xs: ${JSON.stringify(`${breakpoints.xs}px`)},
        sm: ${JSON.stringify(`${breakpoints.sm}px`)},
        md: ${JSON.stringify(`${breakpoints.md}px`)},
        lg: ${JSON.stringify(`${breakpoints.lg}px`)},
        xl: ${JSON.stringify(`${breakpoints.xl}px`)},
        '2xl': ${JSON.stringify(`${breakpoints["2xl"]}px`)},
      },`
          : ""
      }
    },
  },
  plugins: [],
};
`;
}
