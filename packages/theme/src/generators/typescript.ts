/**
 * TypeScript Types Generator
 * Generates TypeScript type definitions from theme config
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate TypeScript theme object
 *
 * @param config - Spexop theme configuration
 * @returns TypeScript code string
 */
export function generateTypeScript(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  // Generate spacing values
  const _spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - Theme Configuration
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

import type { SpexopThemeConfig } from '@spexop/theme';

export const theme: SpexopThemeConfig = {
  meta: {
    name: ${JSON.stringify(config.meta.name)},
    version: ${JSON.stringify(config.meta.version)},
    ${config.meta.author ? `author: ${JSON.stringify(config.meta.author)},` : ""}
    ${config.meta.description ? `description: ${JSON.stringify(config.meta.description)},` : ""}
  },

  colors: {
    primary: ${JSON.stringify(colors.primary)},
    ${colors.primaryHover ? `primaryHover: ${JSON.stringify(colors.primaryHover)},` : ""}
    ${colors.primaryActive ? `primaryActive: ${JSON.stringify(colors.primaryActive)},` : ""}
    ${colors.secondary ? `secondary: ${JSON.stringify(colors.secondary)},` : ""}
    ${colors.secondaryHover ? `secondaryHover: ${JSON.stringify(colors.secondaryHover)},` : ""}
    ${colors.secondaryActive ? `secondaryActive: ${JSON.stringify(colors.secondaryActive)},` : ""}
    surface: ${JSON.stringify(colors.surface)},
    surfaceSecondary: ${JSON.stringify(colors.surfaceSecondary)},
    surfaceHover: ${JSON.stringify(colors.surfaceHover)},
    text: ${JSON.stringify(colors.text)},
    textSecondary: ${JSON.stringify(colors.textSecondary)},
    textMuted: ${JSON.stringify(colors.textMuted)},
    border: ${JSON.stringify(colors.border)},
    borderStrong: ${JSON.stringify(colors.borderStrong)},
    borderSubtle: ${JSON.stringify(colors.borderSubtle)},
    ${colors.success ? `success: ${JSON.stringify(colors.success)},` : ""}
    ${colors.warning ? `warning: ${JSON.stringify(colors.warning)},` : ""}
    ${colors.error ? `error: ${JSON.stringify(colors.error)},` : ""}
    ${colors.info ? `info: ${JSON.stringify(colors.info)},` : ""}
  },

  typography: {
    fontFamily: ${JSON.stringify(typography.fontFamily)},
    ${typography.fontFamilyHeading ? `fontFamilyHeading: ${JSON.stringify(typography.fontFamilyHeading)},` : ""}
    ${typography.fontFamilyMono ? `fontFamilyMono: ${JSON.stringify(typography.fontFamilyMono)},` : ""}
    baseSize: ${typography.baseSize},
    scale: ${typography.scale},
    weights: {
      regular: ${typography.weights.regular},
      semibold: ${typography.weights.semibold},
      bold: ${typography.weights.bold},
    },
    lineHeights: {
      tight: ${typography.lineHeights.tight},
      normal: ${typography.lineHeights.normal},
      relaxed: ${typography.lineHeights.relaxed},
    },
  },

  spacing: {
    baseUnit: ${spacing.baseUnit},
    scale: ${JSON.stringify(spacing.scale)},
  },

  borders: {
    thin: ${borders.thin},
    default: ${borders.default},
    thick: ${borders.thick},
    radiusSubtle: ${borders.radiusSubtle},
    radiusRelaxed: ${borders.radiusRelaxed},
    radiusPill: ${borders.radiusPill},
    defaultStyle: ${JSON.stringify(borders.defaultStyle)},
  },

  ${breakpoints ? `breakpoints: ${JSON.stringify(breakpoints, null, 2)},` : ""}

  ${
    config.darkMode?.enabled
      ? `darkMode: {
    enabled: true,
    colors: ${JSON.stringify(config.darkMode.colors, null, 2)},
  },`
      : ""
  }
};

export default theme;
`;
}
