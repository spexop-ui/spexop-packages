/**
 * UnoCSS Config Generator
 * Generates UnoCSS configuration from theme config
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate UnoCSS configuration
 *
 * @param config - Spexop theme configuration
 * @returns UnoCSS config TypeScript string
 */
export function generateUnoCSS(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders, breakpoints } = config;

  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - UnoCSS Configuration
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

import { defineConfig } from 'unocss';

export default defineConfig({
  theme: {
    colors: {
      primary: {
        DEFAULT: ${JSON.stringify(colors.primary)},
        hover: ${JSON.stringify(colors.primaryHover || colors.primary)},
        active: ${JSON.stringify(colors.primaryActive || colors.primary)},
      },
      ${colors.secondary ? `secondary: ${JSON.stringify(colors.secondary)},` : ""}
      surface: {
        DEFAULT: ${JSON.stringify(colors.surface)},
        secondary: ${JSON.stringify(colors.surfaceSecondary)},
        hover: ${JSON.stringify(colors.surfaceHover)},
      },
      text: {
        DEFAULT: ${JSON.stringify(colors.text)},
        secondary: ${JSON.stringify(colors.textSecondary)},
        muted: ${JSON.stringify(colors.textMuted)},
      },
      border: {
        DEFAULT: ${JSON.stringify(colors.border)},
        strong: ${JSON.stringify(colors.borderStrong)},
        subtle: ${JSON.stringify(colors.borderSubtle)},
      },
      ${colors.success ? `success: ${JSON.stringify(colors.success)},` : ""}
      ${colors.warning ? `warning: ${JSON.stringify(colors.warning)},` : ""}
      ${colors.error ? `error: ${JSON.stringify(colors.error)},` : ""}
      ${colors.info ? `info: ${JSON.stringify(colors.info)},` : ""}
    },
    fontFamily: {
      sans: ${JSON.stringify(typography.fontFamily)},
      ${typography.fontFamilyHeading ? `heading: ${JSON.stringify(typography.fontFamilyHeading)},` : ""}
      ${typography.fontFamilyMono ? `mono: ${JSON.stringify(typography.fontFamilyMono)},` : ""}
    },
    fontSize: ${JSON.stringify(
      {
        xs: `${Math.round(typography.baseSize / typography.scale ** 2)}px`,
        sm: `${Math.round(typography.baseSize / typography.scale)}px`,
        base: `${typography.baseSize}px`,
        lg: `${Math.round(typography.baseSize * typography.scale)}px`,
        xl: `${Math.round(typography.baseSize * typography.scale ** 2)}px`,
        "2xl": `${Math.round(typography.baseSize * typography.scale ** 3)}px`,
      },
      null,
      2,
    )},
    spacing: ${JSON.stringify(
      Object.entries(spacingValues).reduce(
        (acc, [k, v]) => {
          acc[k] = `${v}px`;
          return acc;
        },
        {} as Record<string, string>,
      ),
      null,
      2,
    )},
    borderRadius: {
      subtle: ${JSON.stringify(`${borders.radiusSubtle}px`)},
      relaxed: ${JSON.stringify(`${borders.radiusRelaxed}px`)},
      pill: ${JSON.stringify(`${borders.radiusPill}px`)},
    },
    breakpoints: {
      xs: ${JSON.stringify(`${breakpoints?.xs || 320}px`)},
      sm: ${JSON.stringify(`${breakpoints?.sm || 640}px`)},
      md: ${JSON.stringify(`${breakpoints?.md || 768}px`)},
      lg: ${JSON.stringify(`${breakpoints?.lg || 1024}px`)},
      xl: ${JSON.stringify(`${breakpoints?.xl || 1280}px`)},
      '2xl': ${JSON.stringify(`${breakpoints?.["2xl"] || 1536}px`)},
    },
  },
});
`;
}
