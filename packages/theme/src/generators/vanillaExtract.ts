/**
 * Vanilla Extract Theme Generator
 * Generates Vanilla Extract theme contract
 *
 * @module @spexop/theme/generators
 */

import type { SpexopThemeConfig } from "../types/SpexopThemeConfig.js";

/**
 * Generate Vanilla Extract theme contract
 *
 * @param config - Spexop theme configuration
 * @returns Vanilla Extract contract TypeScript string
 */
export function generateVanillaExtract(config: SpexopThemeConfig): string {
  const { colors, spacing, typography, borders } = config;

  const spacingValues = spacing.values || {
    0: 0,
    1: spacing.scale?.[1] || spacing.baseUnit,
    2: spacing.scale?.[2] || spacing.baseUnit * 2,
    3: spacing.scale?.[3] || spacing.baseUnit * 3,
    4: spacing.scale?.[4] || spacing.baseUnit * 4,
    5: spacing.scale?.[5] || spacing.baseUnit * 5,
    6: spacing.scale?.[6] || spacing.baseUnit * 6,
    7: spacing.scale?.[7] || spacing.baseUnit * 7,
    8: spacing.scale?.[8] || spacing.baseUnit * 8,
    9: spacing.scale?.[9] || spacing.baseUnit * 9,
    10: spacing.scale?.[10] || spacing.baseUnit * 10,
  };

  return `/**
 * ${config.meta.name} - Vanilla Extract Theme
 * Generated by @spexop/theme
 * Version: ${config.meta.version}
 */

import { createThemeContract } from '@vanilla-extract/css';

export const themeContract = createThemeContract({
  colors: {
    primary: null,
    primaryHover: null,
    primaryActive: null,
    ${colors.secondary ? "secondary: null," : ""}
    surface: null,
    surfaceSecondary: null,
    surfaceHover: null,
    text: null,
    textSecondary: null,
    textMuted: null,
    border: null,
    borderStrong: null,
    borderSubtle: null,
    ${colors.success ? "success: null," : ""}
    ${colors.warning ? "warning: null," : ""}
    ${colors.error ? "error: null," : ""}
    ${colors.info ? "info: null," : ""}
  },
  spacing: {
${Object.keys(spacingValues)
  .map((k) => `    '${k}': null,`)
  .join("\n")}
  },
  typography: {
    fontFamily: null,
    fontFamilyHeading: null,
    ${typography.fontFamilyMono ? "fontFamilyMono: null," : ""}
    fontSize: {
      xs: null,
      sm: null,
      base: null,
      lg: null,
      xl: null,
      '2xl': null,
    },
    fontWeight: {
      regular: null,
      semibold: null,
      bold: null,
    },
    lineHeight: {
      tight: null,
      normal: null,
      relaxed: null,
    },
  },
  borders: {
    width: {
      thin: null,
      default: null,
      thick: null,
    },
    radius: {
      subtle: null,
      relaxed: null,
      pill: null,
    },
  },
});

export const theme = {
  colors: {
    primary: ${JSON.stringify(colors.primary)},
    primaryHover: ${JSON.stringify(colors.primaryHover || colors.primary)},
    primaryActive: ${JSON.stringify(colors.primaryActive || colors.primary)},
    ${colors.secondary ? `secondary: ${JSON.stringify(colors.secondary)},` : ""}
    surface: ${JSON.stringify(colors.surface)},
    surfaceSecondary: ${JSON.stringify(colors.surfaceSecondary)},
    surfaceHover: ${JSON.stringify(colors.surfaceHover)},
    text: ${JSON.stringify(colors.text)},
    textSecondary: ${JSON.stringify(colors.textSecondary)},
    textMuted: ${JSON.stringify(colors.textMuted)},
    border: ${JSON.stringify(colors.border)},
    borderStrong: ${JSON.stringify(colors.borderStrong)},
    borderSubtle: ${JSON.stringify(colors.borderSubtle)},
    ${colors.success ? `success: ${JSON.stringify(colors.success)},` : ""}
    ${colors.warning ? `warning: ${JSON.stringify(colors.warning)},` : ""}
    ${colors.error ? `error: ${JSON.stringify(colors.error)},` : ""}
    ${colors.info ? `info: ${JSON.stringify(colors.info)},` : ""}
  },
  spacing: ${JSON.stringify(
    Object.entries(spacingValues).reduce(
      (acc, [k, v]) => {
        acc[k] = `${v}px`;
        return acc;
      },
      {} as Record<string, string>,
    ),
    null,
    2,
  )},
  typography: {
    fontFamily: ${JSON.stringify(typography.fontFamily)},
    fontFamilyHeading: ${JSON.stringify(typography.fontFamilyHeading || typography.fontFamily)},
    ${typography.fontFamilyMono ? `fontFamilyMono: ${JSON.stringify(typography.fontFamilyMono)},` : ""}
    fontSize: {
      xs: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale ** 2)}px`)},
      sm: ${JSON.stringify(`${Math.round(typography.baseSize / typography.scale)}px`)},
      base: ${JSON.stringify(`${typography.baseSize}px`)},
      lg: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale)}px`)},
      xl: ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 2)}px`)},
      '2xl': ${JSON.stringify(`${Math.round(typography.baseSize * typography.scale ** 3)}px`)},
    },
    fontWeight: {
      regular: ${JSON.stringify(typography.weights.regular.toString())},
      semibold: ${JSON.stringify(typography.weights.semibold.toString())},
      bold: ${JSON.stringify(typography.weights.bold.toString())},
    },
    lineHeight: {
      tight: ${JSON.stringify(typography.lineHeights.tight.toString())},
      normal: ${JSON.stringify(typography.lineHeights.normal.toString())},
      relaxed: ${JSON.stringify(typography.lineHeights.relaxed.toString())},
    },
  },
  borders: {
    width: {
      thin: ${JSON.stringify(`${borders.thin}px`)},
      default: ${JSON.stringify(`${borders.default}px`)},
      thick: ${JSON.stringify(`${borders.thick}px`)},
    },
    radius: {
      subtle: ${JSON.stringify(`${borders.radiusSubtle}px`)},
      relaxed: ${JSON.stringify(`${borders.radiusRelaxed}px`)},
      pill: ${JSON.stringify(`${borders.radiusPill}px`)},
    },
  },
};
`;
}
